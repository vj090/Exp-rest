
/home/nirali/projects/Expense_Management/expense_management --------------------- git path

/projects/Expense_Management/expense_management/Expense_Management ------------------ project path
----------------------------------------------------django models relationship-----------------------------------------------------------

-------------------------------------One to One Relationship----------------------------------

class Employee(models.Model):
      pass

class Salary(models.Model):
      employee = models.OneToOneField(Employee, on_delete=models.CASCADE)
      
-------------------------------------Many-to-One/One-to-Many relationship -----------------------------------------------------------

class Reporter(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

class Article(models.Model):
    ...
    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)
    
-------------------------------------Many to Many Relationship -----------------------------------------------------------


class Club(models.Model):
    name = models.CharField(max_length=100)
    members = models.ManyToManyField(Member)
    
    
    
----------------------------------------------------------- custom error views --------------------------------------------------------

The page_not_found() view is overridden by handler404:
handler404 = 'mysite.views.my_custom_page_not_found_view'

The server_error() view is overridden by handler500:
handler500 = 'mysite.views.my_custom_error_view'

The permission_denied() view is overridden by handler403:
handler403 = 'mysite.views.my_custom_permission_denied_view'

The bad_request() view is overridden by handler400:
handler400 = 'mysite.views.my_custom_bad_request_view'



from django.shortcuts import render_to_response
from django.template import RequestContext


def handler404(request, *args, **argv):
    response = render_to_response('404.html', {},
                                  context_instance=RequestContext(request))
    response.status_code = 404
    return response


def handler500(request, *args, **argv):
    response = render_to_response('500.html', {},
                                  context_instance=RequestContext(request))
    response.status_code = 500
    return response
    
# project/urls.py

handler404 = 'my_app.views.handler404'
handler500 = 'my_app.views.handler500'
handler404 = 'mysite.views.my_custom_page_not_found_view'
handler500 = 'mysite.views.my_custom_error_view'
handler403 = 'mysite.views.my_custom_permission_denied_view'
handler400 = 'mysite.views.my_custom_bad_request_view'



 ssh-keygen
 1806  cat /home/nirali/.ssh/bitbucket.pub 

--------------------------------------------------------------------------------------------------------------------
python manage.py shell_plus --ipython
reverse(url, kwrgs)

import pdb; pdb.set_trace()

import code; code.interact(local=dict(globals(), **locals()))


